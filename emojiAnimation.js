import { trackNewHighScore, trackEmojiClick } from './yandexMetrika.js';
const heroAppearSound = new Howl({
    src: ['./audio/hero_appear.mp3'],
    volume: 0.6
});

const gameOverSound = new Howl({
    src: ['./audio/game_over.mp3'],
    volume: 0.7
});

const emojiClickSound = new Howl({
    src: ['./audio/emoji_click.mp3'],
    volume: 0.5
});

const gameStatusMusic = new Howl({
    src: ['./audio/game_status_music.mp3'],
    volume: 0.3,
    loop: true
});

const ambientMusic = new Howl({
    src: ['./audio/ambient_music.mp3'],
    volume: 0.2,
    loop: true
});

const stompingSounds = [
    new Howl({
        src: ['./audio/stomping.mp3'],
        volume: 0.4,
        loop: true
    }),
    new Howl({
        src: ['./audio/stomping2.mp3'], // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª stomping2.mp3
        volume: 0.4,
        loop: true
    }),
    new Howl({
        src: ['./audio/stomping3.mp3'], // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª stomping3.mp3
        volume: 0.4,
        loop: true
    })
];

const lifeLostSounds = [
    new Howl({
        src: ['./audio/life_lost1.mp3'], // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª life_lost1.mp3
        volume: 0.6
    }),
    new Howl({
        src: ['./audio/life_lost2.mp3'], // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª life_lost2.mp3
        volume: 0.6
    }),
    new Howl({
        src: ['./audio/life_lost3.mp3'], // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª life_lost3.mp3
        volume: 0.6
    })
];

const scoreMilestoneSounds = [
    new Howl({
        src: ['./audio/score_50_1.mp3'],
        volume: 0.5
    }),
    new Howl({
        src: ['./audio/score_50_2.mp3'],
        volume: 0.5
    }),
    new Howl({
        src: ['./audio/score_50_3.mp3'],
        volume: 0.5
    })
];

export function initEmojiAnimation() {
    ambientMusic.play(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const backgroundAnimation = document.querySelector('.background-animation');
    const hero = document.getElementById('hero');
    const container = document.getElementById('emoji-container');
    const livesElement = document.getElementById('lives');
    const emojiCountElement = document.getElementById('emoji-count');
    const gameOverElement = document.getElementById('game-over');
    const highScoreElement = document.getElementById('high-score'); // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–æ—Ä–¥–∞

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∏
    function setCookie(name, value, days) {
        let expires = "";
        if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=-99999999;';
    }

    let highScore = 0; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ—Ä–¥ –∏–∑ –∫—É–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    highScore = parseInt(getCookie('highScore') || '0');
    updateHighScoreDisplay();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞
    function updateHighScoreDisplay() {
    if (highScoreElement) {
        highScoreElement.textContent = `üèÜ –†–µ–∫–æ—Ä–¥: ${highScore}`;
        highScoreElement.classList.add('animate');
        setTimeout(() => {
            highScoreElement.classList.remove('animate');
        }, 200); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    }
}

    let caughtEmojisCount = 0;
    let lives = 3;
    let gameStarted = false;
    let gameOver = false;

    const MAX_EMOJIS = 60; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    let activeEmojis = 0;

    let initialSpawnInterval = 1000; // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–≤–Ω–∞ (1 —Å–µ–∫—É–Ω–¥–∞)
    let currentSpawnInterval = initialSpawnInterval;
    const minSpawnInterval = 300; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–≤–Ω–∞ (0.3 —Å–µ–∫—É–Ω–¥—ã)
    const spawnIntervalDecreaseRate = 50; // –ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∫–∞–∂–¥—ã–π —à–∞–≥
    const difficultyThreshold = 10; // –ö–∞–∂–¥—ã–µ 10 –ø–æ–π–º–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    let currentDifficultyThreshold = difficultyThreshold;

    let spawnInterval = null;
    let lifeCheckInterval = null;

    function updateEmojiCount() {
        if (caughtEmojisCount > 0) {
            emojiCountElement.textContent = caughtEmojisCount;
            emojiCountElement.style.display = 'block';
            emojiCountElement.classList.add('animate');
            if (caughtEmojisCount > 0 && caughtEmojisCount % 10 === 0) {
                emojiCountElement.classList.add('milestone-score');
                scoreMilestoneSounds[Math.floor(Math.random() * scoreMilestoneSounds.length)].play();
                setTimeout(() => {
                    emojiCountElement.classList.remove('milestone-score');
                }, 2000); // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            }
            setTimeout(() => {
                emojiCountElement.classList.remove('animate');
            }, 200);
        } else {
            emojiCountElement.style.display = 'none';
        }
        if (caughtEmojisCount >= currentDifficultyThreshold) {
            updateDifficulty();
            currentDifficultyThreshold += difficultyThreshold; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        }
    }

    function updateDifficulty() {
        if (currentSpawnInterval > minSpawnInterval) {
            currentSpawnInterval = Math.max(minSpawnInterval, currentSpawnInterval - spawnIntervalDecreaseRate);
            if (spawnInterval) {
                clearInterval(spawnInterval);
                spawnInterval = setInterval(createFloatingEmoji, currentSpawnInterval);
            }
        }
    }

    function updateLives() {
        if (livesElement) {
            const totalLives = 3; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π
            livesElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–¥–µ—á–∫–∏
            for (let i = 0; i < totalLives; i++) {
                const heartSpan = document.createElement('span');
                heartSpan.classList.add('heart-icon');
                heartSpan.dataset.heartIndex = i; // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if (i < lives) {
                    heartSpan.textContent = '‚ù§Ô∏è'; // –ü–æ–ª–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∂–∏–∑–Ω–µ–π
                } else {
                    heartSpan.textContent = 'üíî'; // –†–∞–∑–±–∏—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ –¥–ª—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∂–∏–∑–Ω–µ–π
                    heartSpan.classList.add('spent-heart'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                }
                livesElement.appendChild(heartSpan);
            }
        }
    }

    function endGame() {
        gameOver = true;
        if (spawnInterval) clearInterval(spawnInterval);
        if (lifeCheckInterval) clearInterval(lifeCheckInterval);
        gameStatusMusic.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã

        const heroTitle = document.querySelector('#hero h1');
        heroAppearSound.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–µ—Ä–æ—è
        const gameOverElement = document.getElementById('game-over');

        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è Ainel Faust 3D
        if (heroTitle) {
            heroTitle.style.animation = 'none'; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            void heroTitle.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            heroTitle.style.animation = 'heroTitleReverse 0.5s forwards'; // –£—Å–∫–æ—Ä—è–µ–º –≤ 2 —Ä–∞–∑–∞
            heroTitle.addEventListener('animationend', function handleHeroTitleAnimationEnd() {
                heroTitle.style.visibility = 'hidden';
                heroTitle.style.animation = ''; // –û—á–∏—â–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ animation
                heroTitle.removeEventListener('animationend', handleHeroTitleAnimationEnd);

                // –ü–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è Ainel Faust 3D, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Game Over
                setTimeout(() => {
                    if (gameOverElement) {
                        // gameOverSound.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ Game Over
                        // gameOverElement.style.display = 'block';
                    }
                }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º Game Over
            });
        }

        if (gameOverElement) {
            gameOverSound.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ Game Over
            gameOverElement.style.display = 'block';
            gameOverElement.style.visibility = 'visible';
            gameOverElement.style.opacity = '0';
            gameOverElement.style.animation = 'none'; // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            void gameOverElement.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            gameOverElement.style.animation = 'gameOverFadeIn 4s forwards'; // –£—Å–∫–æ—Ä—è–µ–º –≤ 2 —Ä–∞–∑–∞
            gameOverElement.addEventListener('animationend', function handleGameOverFadeInEnd() {
                gameOverElement.removeEventListener('animationend', handleGameOverFadeInEnd);
                // –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è Game Over, –∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É (–±—ã–ª–æ 2) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
                setTimeout(() => {
                    gameOverElement.style.animation = 'none'; // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
                    void gameOverElement.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
                    gameOverElement.style.animation = 'gameOverFadeOut 0.5s forwards'; // –£—Å–∫–æ—Ä—è–µ–º –≤ 2 —Ä–∞–∑–∞
                    gameOverElement.addEventListener('animationend', function handleGameOverFadeOutEnd() {
                        gameOverElement.style.visibility = 'hidden';
                        gameOverElement.style.opacity = '0';
                        gameOverElement.style.animation = ''; // –û—á–∏—â–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ animation
                        gameOverElement.removeEventListener('animationend', handleGameOverFadeOutEnd);

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –≤—ã—à–µ
                        if (caughtEmojisCount > highScore) {
                            highScore = caughtEmojisCount;
                            setCookie('highScore', highScore, 365); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥ –Ω–∞ 365 –¥–Ω–µ–π
                            updateHighScoreDisplay();
                            if (typeof ym === 'function') {
                                trackNewHighScore(highScore);
                            }
                        }

                        resetGame();
                    }, { once: true });
                }, 4000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º Game Over (—É–≤–µ–ª–∏—á–µ–Ω–∞)
            }, { once: true });
        }

        activeEmojiElements.forEach(emoji => {
            const rect = emoji.getBoundingClientRect();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç–º–æ–¥–∑–∏ –µ—â–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏–ª–∏ —É–∂–µ —É–ª–µ—Ç–µ–ª–æ –≤–≤–µ—Ä—Ö
            // –ï—Å–ª–∏ –æ–Ω–æ —É–∂–µ —É–ª–µ—Ç–µ–ª–æ –≤–≤–µ—Ä—Ö, –µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞–¥–∞—Ç—å
            if (rect.bottom > 0) { // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–º–æ–¥–∑–∏ –µ—â–µ –≤–∏–¥–Ω–æ
                forceEmojiFall(emoji);
            } else {
                emoji.remove(); // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —É–ª–µ—Ç–µ–ª–æ
            }
        });
        activeEmojiElements = []; // Clear the array
        activeEmojis = 0; // Reset the counter
    } // This closes the endGame function

    function resetGame() {
        lives = 3;
        caughtEmojisCount = 0;
        gameStarted = false;
        gameOver = false;
        currentSpawnInterval = initialSpawnInterval; // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–ø–∞–≤–Ω–∞
        currentDifficultyThreshold = difficultyThreshold; // –°–±—Ä–æ—Å –ø–æ—Ä–æ–≥–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

        livesElement.style.opacity = '0';
        livesElement.style.visibility = 'hidden';
        emojiCountElement.style.opacity = '0';
        emojiCountElement.style.visibility = 'hidden';
        highScoreElement.style.opacity = '0';
        highScoreElement.style.visibility = 'hidden';

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è
        setTimeout(() => {
            updateLives();
            updateEmojiCount();
        }, 500); // 500ms —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CSS-–ø–µ—Ä–µ—Ö–æ–¥–∞

        const heroTitle = document.querySelector('#hero h1');
        if (heroTitle) {
            heroTitle.style.visibility = 'visible';
            heroTitle.style.opacity = '1'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ opacity —Å–±—Ä–æ—à–µ–Ω
            heroTitle.style.display = 'block'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ display —Å–±—Ä–æ—à–µ–Ω
            heroTitle.style.animation = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            void heroTitle.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            heroTitle.style.animation = 'heroTitle 1s ease-in-out, gradientShift 4s ease-in-out infinite'; // –£—Å–∫–æ—Ä—è–µ–º heroTitle –≤ 2 —Ä–∞–∑–∞
            heroAppearSound.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è title hero
            ambientMusic.play(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
        }

        const gameOverElement = document.getElementById('game-over');
        if (gameOverElement) {
            gameOverElement.style.visibility = 'hidden';
            gameOverElement.style.opacity = '0';
            gameOverElement.style.animation = ''; // –û—á–∏—â–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ animation
        }

        // Clear any remaining emojis from the screen
        const currentEmojis = Array.from(backgroundAnimation.querySelectorAll('.floating-emoji'));
        currentEmojis.forEach(emoji => emoji.remove());

        // Reset intervals if they somehow persist
        if (spawnInterval) clearInterval(spawnInterval);
        if (lifeCheckInterval) clearInterval(lifeCheckInterval);

        // Re-spawn initial emojis after reset
        for (let i = 0; i < 5; i++) {
            createFloatingEmoji();
        }

        // Restart spawn interval
        spawnInterval = setInterval(createFloatingEmoji, currentSpawnInterval);
    }

    const emojis = [
        'üòÄ', 'üòÇ', 'üòç', 'ü§©', 'ü•≥', 'üòé', 'üòá', 'ü•∞', 'üòã', 'üòú',
        'üëç', 'üëè', 'üôå', 'üíñ', '‚ú®', 'üî•', 'üåà', '‚òÄÔ∏è', 'üå∏', 'üåº',
        'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ',
        'üçé', 'üçì', 'üçá', 'üçâ', 'üçç', 'üçë', 'üçí', 'ü•ù', 'üçî', 'üçï',
        'üç¶', 'üç©', 'üç™', 'üéÇ', 'üç¨', 'üç≠', 'üç´', '‚òï', 'üçµ', 'ü•Ç',
        'üéà', 'üéÅ', 'üéâ', 'üéä', 'üéÄ', 'üëë', 'üíé', 'üí´', 'üåü', '‚ú®'
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–ª—ë—Ç–∞ –≤–≤–µ—Ä—Ö —á–µ—Ä–µ–∑ requestAnimationFrame
    function lifeCheckLoop() {
        if (gameOver || !gameStarted) return;
        const heroRect = hero.getBoundingClientRect();
        const list = Array.from(backgroundAnimation.querySelectorAll('.floating-emoji'));
        list.forEach(el => {
            if (el.classList.contains('falling')) return;
            if (el.dataset.escaped === '1') return;
            const rect = el.getBoundingClientRect();
            if (rect.bottom <= heroRect.top) {
                el.dataset.escaped = '1';
                lives -= 1; // –°–Ω–∞—á–∞–ª–∞ —É–º–µ–Ω—å—à–∞–µ–º –∂–∏–∑–Ω–∏
                lifeLostSounds[Math.floor(Math.random() * lifeLostSounds.length)].play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–≤—É–∫ –ø–æ—Ç–µ—Ä–∏ –∂–∏–∑–Ω–∏
                updateLives(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ä–¥–µ—á–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
                const lostHeartIndex = lives; // –ò–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞
                const lostHeartElement = livesElement.querySelector(`[data-heart-index="${lostHeartIndex}"]`);
                if (lostHeartElement) {
                    animateFallingHeart(lostHeartElement);
                }
                el.remove();
                activeEmojis = Math.max(0, activeEmojis - 1);
                // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ activeEmojiElements
                activeEmojiElements = activeEmojiElements.filter(item => item !== el);
                if (lives <= 0) endGame();
            }
        });
        requestAnimationFrame(lifeCheckLoop);
    }

    function forceEmojiFall(el) {
        const size = parseFloat(getComputedStyle(el).fontSize) || 30;
        const rect = el.getBoundingClientRect();
        el.style.animation = 'none';
        el.style.opacity = '1';
        el.style.transform = 'none';
        el.style.position = 'fixed';
        el.style.left = `${rect.left}px`;
        el.style.top = `${rect.top}px`;
        el.style.zIndex = '1001';
        el.classList.add('falling');
        const randomX = (Math.random() - 0.5) * 400;
        const randomRotation = Math.random() * 1080;
        const fallAnimationDuration = 2 + Math.random() * 2;
        el.style.setProperty('--random-x', `${randomX}px`);
        el.style.setProperty('--random-rotation', `${randomRotation}deg`);
        el.style.setProperty('--emoji-size', `${size}px`);
        el.style.animation = `fall ${fallAnimationDuration}s forwards`;
        el.addEventListener('animationend', () => {
            el.remove();
            activeEmojis = Math.max(0, activeEmojis - 1);
        }, { once: true });
    }

    function animateFallingHeart(heartElement) {
        const heartRect = heartElement.getBoundingClientRect();
        const fallingHeart = document.createElement('span');
        fallingHeart.textContent = '‚ù§Ô∏è'; // –í—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ
        fallingHeart.classList.add('falling-heart');
        fallingHeart.style.left = `${heartRect.left}px`;
        fallingHeart.style.top = `${heartRect.top}px`;
        fallingHeart.style.fontSize = `${heartRect.height}px`; // –†–∞–∑–º–µ—Ä –∫–∞–∫ —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞

        const randomX = (Math.random() - 0.5) * 200; // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–±—Ä–æ—Å –¥–ª—è —Å–µ—Ä–¥–µ—á–µ–∫
        const randomRotation = Math.random() * 720; // –ú–µ–Ω—å—à–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
        const fallAnimationDuration = 1.5 + Math.random() * 1; // –ë—ã—Å—Ç—Ä–µ–µ –ø–∞–¥–∞–µ—Ç

        fallingHeart.style.setProperty('--random-x', `${randomX}px`);
        fallingHeart.style.setProperty('--random-rotation', `${randomRotation}deg`);
        fallingHeart.style.setProperty('--fall-animation-duration', `${fallAnimationDuration}s`);

        document.body.appendChild(fallingHeart); // –î–æ–±–∞–≤–ª—è–µ–º –≤ body, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ–ª–æ –æ—Ç backgroundAnimation

        fallingHeart.addEventListener('animationend', () => {
            fallingHeart.remove();
        }, { once: true });
    }

    function startGame(clickedTop) {
        if (gameStarted) return;
        gameStarted = true;
        ambientMusic.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        gameStatusMusic.play(); // –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã

        livesElement.style.opacity = '1';
        livesElement.style.visibility = 'visible';
        emojiCountElement.style.opacity = '1';
        emojiCountElement.style.visibility = 'visible';
        highScoreElement.style.opacity = '1';
        highScoreElement.style.visibility = 'visible';

        // Clear existing intervals before starting new ones
        if (spawnInterval) clearInterval(spawnInterval);
        if (lifeCheckInterval) clearInterval(lifeCheckInterval);

        const current = Array.from(backgroundAnimation.querySelectorAll('.floating-emoji'));
        current.forEach(el => {
            const rect = el.getBoundingClientRect();
            if (rect.top < clickedTop) {
                forceEmojiFall(el);
            } else {
                el.dataset.target = '1';
            }
        });

        spawnInterval = setInterval(createFloatingEmoji, currentSpawnInterval);
        requestAnimationFrame(lifeCheckLoop);
    }

    function createFloatingEmoji() {
        if (gameOver) return;
        if (activeEmojis >= MAX_EMOJIS) return;
        const emoji = document.createElement('span');
        emoji.classList.add('floating-emoji');
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        const size = Math.random() * 40 + 20;
        emoji.style.fontSize = `${size}px`;
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∞–≤–Ω –≤–Ω—É—Ç—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü backgroundAnimation
        const containerRect = backgroundAnimation.getBoundingClientRect();

        console.log('containerRect:', containerRect);
        console.log('Emoji size:', size);

        // Calculate startX relative to the container's left edge (0 to container.width - size)
        const startX = Math.random() * (containerRect.width - size);
        console.log('Calculated startX (relative to container):', startX);
        // –°–ø–∞–≤–Ω–∏–º –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã backgroundAnimation, —á—Ç–æ–±—ã –ª–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ hero
        const startY = backgroundAnimation.offsetHeight + 50; // Start below the visible area
        emoji.style.left = `${Math.random() * (backgroundAnimation.offsetWidth - 30)}px`;
        emoji.style.top = `${startY}px`;
        const animationDuration = Math.random() * 10 + 5;
        emoji.dataset.animationDuration = animationDuration;
        // –ê–Ω–∏–º–∞—Ü–∏—è floatAndFade –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —ç–º–æ–¥–∑–∏
        emoji.style.animation = `floatAndFade ${animationDuration}s ease-in forwards`;
        if (!gameStarted) {
            emoji.style.animationDelay = `${Math.random() * 5}s`;
        } else {
            emoji.style.animationDelay = `${Math.random() * 3}s`;
        }
        backgroundAnimation.appendChild(emoji);
        activeEmojis++;
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        activeEmojiElements.push(emoji);
        emoji.addEventListener('click', (event) => {
            const clickedEmoji = event.target;
            const rect = clickedEmoji.getBoundingClientRect();
            caughtEmojisCount++;
            emojiClickSound.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–º–æ–¥–∑–∏
            if (typeof ym === 'function') {
                
                
                
                trackEmojiClick();
            }
            if (caughtEmojisCount > highScore) {
                highScore = caughtEmojisCount;
                setCookie('highScore', highScore, 365); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥ –Ω–∞ 365 –¥–Ω–µ–π
                updateHighScoreDisplay();
            }


            updateEmojiCount();
            if (typeof ym === 'function') {
      
            }
            if (!gameStarted) {
                startGame(rect.top);
            }
            forceEmojiFall(clickedEmoji);
        });
    }

    let activeEmojiElements = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º–æ–¥–∑–∏

    updateEmojiCount();
    updateLives();

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏
    for (let i = 0; i < 5; i++) {
      createFloatingEmoji();
    }

    requestAnimationFrame(updateEmojiOpacity); // Moved here

    function updateEmojiOpacity() {
        const heroRect = hero.getBoundingClientRect();
        const backgroundRect = backgroundAnimation.getBoundingClientRect();

        activeEmojiElements = activeEmojiElements.filter(emoji => {
            const rect = emoji.getBoundingClientRect();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
            if (!emoji.parentElement) return false;

            let opacity = 1;
            const fadeZone = 100; // –ó–æ–Ω–∞ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö

            // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å–Ω–∏–∑—É (–æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã backgroundAnimation –∫ heroRect.bottom)
            if (rect.top > heroRect.bottom - fadeZone) {
                opacity = Math.min(1, (backgroundRect.bottom - rect.top) / fadeZone);
            }
            // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–≤–µ—Ä—Ö—É (–æ—Ç heroRect.top –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ backgroundAnimation)
            else if (rect.bottom < heroRect.top + fadeZone) {
                opacity = Math.min(1, (rect.bottom - backgroundRect.top) / fadeZone);
            }

            // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—à–ª–æ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É backgroundAnimation
            if (rect.bottom < backgroundRect.top) {
                if (gameStarted) { // –û—Ç–Ω–∏–º–∞–µ–º –∂–∏–∑–Ω—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
                    lives -= 1; // –û—Ç–Ω–∏–º–∞–µ–º –∂–∏–∑–Ω—å
                    lifeLostSounds[Math.floor(Math.random() * lifeLostSounds.length)].play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–≤—É–∫ –ø–æ—Ç–µ—Ä–∏ –∂–∏–∑–Ω–∏
                    updateLives(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π
                    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ä–¥–µ—á–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
                    const lostHeartIndex = lives; // –ò–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞
                    const lostHeartElement = livesElement.querySelector(`[data-heart-index="${lostHeartIndex}"]`);
                    if (lostHeartElement) {
                        animateFallingHeart(lostHeartElement);
                    }
                    if (lives <= 0) endGame(); // –ï—Å–ª–∏ –∂–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
                }
                emoji.remove();
                activeEmojis--; // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º–æ–¥–∑–∏
                return false; // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ activeEmojiElements
            }

            emoji.style.opacity = opacity;
            return true;
        });

        requestAnimationFrame(updateEmojiOpacity);
    }
}