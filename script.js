document.addEventListener('DOMContentLoaded', () => {
    const portfolioGallery = document.getElementById('portfolio-gallery');
    const tabButtons = document.querySelectorAll('.tab-button');

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    // –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Ä—É—á–Ω—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –ø—É—Ç—è–º–∏ –∫ –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.
    // –ü—Ä–∏–º–µ—Ä: 'images/3d_print/image1.jpg'
    const portfolioItems = {
        '3d_print': [
            { src: 'images/3d_print/1.png', alt: '3D –ø–µ—á–∞—Ç—å 1', title: '3D –ø–µ—á–∞—Ç—å 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ 3D –ø–µ—á–∞—Ç–∏ 1.' },
            { src: 'images/3d_print/2.png', alt: '3D –ø–µ—á–∞—Ç—å 2', title: '3D –ø–µ—á–∞—Ç—å 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ 3D –ø–µ—á–∞—Ç–∏ 2.' },
            { src: 'images/3d_print/3.png', alt: '3D –ø–µ—á–∞—Ç—å 3', title: '3D –ø–µ—á–∞—Ç—å 3', description: '–û–ø–∏—Å–∞–Ω–∏–µ 3D –ø–µ—á–∞—Ç–∏ 3.' }
        ],
        'games': [
            { src: 'images/games/1.png', alt: '–ò–≥—Ä–∞ 1', title: '–ò–≥—Ä–∞ 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã 1.' },
            { src: 'images/games/2.png', alt: '–ò–≥—Ä–∞ 2', title: '–ò–≥—Ä–∞ 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã 2.' },
            { src: 'images/games/3.png', alt: '–ò–≥—Ä–∞ 3', title: '–ò–≥—Ä–∞ 3', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã 3.' }
        ],
        'technical_models': [
            { src: 'images/technical_models/1.png', alt: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 1', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ 1.' },
            { src: 'images/technical_models/2.png', alt: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 2', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ 2.' },
            { src: 'images/technical_models/3.png', alt: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 3', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 3', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ 3.' }
        ]
    };

    function renderPortfolio(category) {
        portfolioGallery.innerHTML = ''; // –û—á–∏—â–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
        const items = portfolioItems[category];

        if (items && items.length > 0) {
            items.forEach(item => {
                const portfolioItem = document.createElement('div');
                portfolioItem.classList.add('portfolio-item');

                const img = document.createElement('img');
                img.src = item.src;
                img.alt = item.alt;

                const info = document.createElement('div');
                info.classList.add('portfolio-item-info');

                const title = document.createElement('h3');
                title.textContent = item.title;

                const description = document.createElement('p');
                description.textContent = item.description;

                info.appendChild(title);
                info.appendChild(description);
                portfolioItem.appendChild(img);
                portfolioItem.appendChild(info);
                portfolioGallery.appendChild(portfolioItem);
            });
        } else {
            portfolioGallery.innerHTML = '<p>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.</p>';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            const category = button.dataset.category;
            renderPortfolio(category);
        });
    });

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–Ω–∞ —Å —Ä–µ–∞–∫—Ü–∏–µ–π –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
    const backgroundAnimation = document.querySelector('.background-animation');
    const emojis = ['üê±', 'üê∞', 'üå∏', '‚ú®', 'üíñ', 'üåà', 'üçì', 'üéÄ', 'üåü', 'üêæ', 'ü¶ã', 'üå∫', 'üí´', 'ü¶Ñ', 'üåô', '‚≠ê', 'üéà', 'üé®', 'üé≠', 'üé™'];
    const animatedShapes = [];
    let mouseX = 0, mouseY = 0;
    let animationId;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    function getRandomPosition() {
        const margin = 50; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤
        const x = Math.random() * (backgroundAnimation.offsetWidth - margin * 2) + margin;
        const y = Math.random() * (backgroundAnimation.offsetHeight - margin * 2) + margin;
        return { x, y };
    }

    function createAnimatedShape(x, y, isMouseTriggered = false) {
        const shape = document.createElement('span');
        shape.classList.add('animated-shape');
        
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        shape.textContent = randomEmoji;
        
        const size = Math.random() * 40 + 15; // –†–∞–∑–º–µ—Ä –æ—Ç 15px –¥–æ 55px
        shape.style.fontSize = `${size}px`;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        const animations = ['', 'bounce', 'spin'];
        const randomAnimation = animations[Math.floor(Math.random() * animations.length)];
        if (randomAnimation) {
            shape.classList.add(randomAnimation);
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        let initialX, initialY;
        if (x !== undefined && y !== undefined && isMouseTriggered) {
            // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –æ—Ç –º—ã—à–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
            initialX = x;
            initialY = y;
        } else {
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            const pos = getRandomPosition();
            initialX = pos.x;
            initialY = pos.y;
        }

        shape.style.left = `${initialX - size / 2}px`;
        shape.style.top = `${initialY - size / 2}px`;
        shape.style.opacity = Math.random() * 0.8 + 0.2;
        shape.style.color = `hsl(${Math.random() * 60 + 300}, 80%, 70%)`; // –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        
        backgroundAnimation.appendChild(shape);
        animatedShapes.push(shape);

        // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (–æ—Ç 10 –¥–æ 20 —Å–µ–∫—É–Ω–¥)
        const fadeTime = Math.random() * 10000 + 10000; // 10-20 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            shape.classList.add('fade-out');
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏—Å—á–µ–∑–∞–Ω–∏—è
            setTimeout(() => {
                if (shape.parentNode) {
                    shape.parentNode.removeChild(shape);
                }
                const index = animatedShapes.indexOf(shape);
                if (index > -1) {
                    animatedShapes.splice(index, 1);
                }
            }, 1500); // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏—Å—á–µ–∑–∞–Ω–∏–µ
        }, fadeTime);

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –æ—Ç –º—ã—à–∏, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        if (isMouseTriggered) {
            shape.style.transform = 'scale(1.5)';
            setTimeout(() => {
                shape.style.transform = '';
            }, 200);
        }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for (let i = 0; i < 15; i++) {
        setTimeout(() => {
            createAnimatedShape();
        }, i * 300); // –°–æ–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —ç–º–æ–¥–∑–∏ –∫–∞–∂–¥—ã–µ 300–º—Å
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç
    function updateParallax() {
        const centerX = backgroundAnimation.offsetWidth / 2;
        const centerY = backgroundAnimation.offsetHeight / 2;

        const offsetX = (mouseX - centerX) * 0.03;
        const offsetY = (mouseY - centerY) * 0.03;

        animatedShapes.forEach((shape, index) => {
            const depth = (parseFloat(shape.style.fontSize) / 55) * 2; // –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–ª–ª–∞–∫—Å
            const delay = index * 0.1; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–ª–Ω–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            
            shape.style.transform = `translate(${offsetX * depth}px, ${offsetY * depth}px) translateZ(${delay}px)`;
        });

        animationId = requestAnimationFrame(updateParallax);
    }

    let lastMouseTime = 0;
    let mouseMoveCount = 0;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;

        const currentTime = Date.now();
        mouseMoveCount++;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
        // –ù–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 10 –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏
        if (mouseMoveCount > 10 && currentTime - lastMouseTime > 2000 && Math.random() < 0.3) {
            createAnimatedShape(mouseX, mouseY, true);
            lastMouseTime = currentTime;
            mouseMoveCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–≥—É—Ä
        if (animatedShapes.length > 20) {
            const oldestShape = animatedShapes.shift();
            if (oldestShape && oldestShape.parentNode) {
                oldestShape.classList.add('fade-out');
                setTimeout(() => {
                    if (oldestShape.parentNode) {
                        oldestShape.parentNode.removeChild(oldestShape);
                    }
                }, 1500);
            }
        }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–∞–∫—Å –∞–Ω–∏–º–∞—Ü–∏—é
    updateParallax();

    // –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    function maintainEmojiCount() {
        const targetCount = 15;
        const currentCount = animatedShapes.length;
        
        if (currentCount < targetCount) {
            const needed = targetCount - currentCount;
            for (let i = 0; i < needed; i++) {
                setTimeout(() => {
                    createAnimatedShape();
                }, i * 500); // –°–æ–∑–¥–∞–µ–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 500–º—Å
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(maintainEmojiCount, 5000);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        animatedShapes.forEach(shape => {
            if (shape.parentNode) {
                shape.parentNode.removeChild(shape);
            }
        });
        animatedShapes.length = 0;
        
        for (let i = 0; i < 15; i++) {
            createAnimatedShape();
        }
    });

    // –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞)
    renderPortfolio('3d_print');
});