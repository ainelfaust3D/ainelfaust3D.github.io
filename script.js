document.addEventListener('DOMContentLoaded', () => {
    const portfolioGallery = document.getElementById('portfolio-gallery');
    const tabButtons = document.querySelectorAll('.tab-button');

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    // –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Ä—É—á–Ω—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –ø—É—Ç—è–º–∏ –∫ –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.
    // –ü—Ä–∏–º–µ—Ä: 'images/3d_print/image1.jpg'
    const portfolioItems = {
        '3d_print': [
            { src: 'images/3d_print/1.png', alt: '3D –ø–µ—á–∞—Ç—å 1', title: '3D –ø–µ—á–∞—Ç—å 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ 3D –ø–µ—á–∞—Ç–∏ 1.' },
            { src: 'images/3d_print/2.png', alt: '3D –ø–µ—á–∞—Ç—å 2', title: '3D –ø–µ—á–∞—Ç—å 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ 3D –ø–µ—á–∞—Ç–∏ 2.' },
            { src: 'images/3d_print/3.png', alt: '3D –ø–µ—á–∞—Ç—å 3', title: '3D –ø–µ—á–∞—Ç—å 3', description: '–û–ø–∏—Å–∞–Ω–∏–µ 3D –ø–µ—á–∞—Ç–∏ 3.' }
        ],
        'games': [
            { src: 'images/games/1.png', alt: '–ò–≥—Ä–∞ 1', title: '–ò–≥—Ä–∞ 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã 1.' },
            { src: 'images/games/2.png', alt: '–ò–≥—Ä–∞ 2', title: '–ò–≥—Ä–∞ 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã 2.' },
            { src: 'images/games/3.png', alt: '–ò–≥—Ä–∞ 3', title: '–ò–≥—Ä–∞ 3', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã 3.' }
        ],
        'technical_models': [
            { src: 'images/technical_models/1.png', alt: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 1', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ 1.' },
            { src: 'images/technical_models/2.png', alt: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 2', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ 2.' },
            { src: 'images/technical_models/3.png', alt: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 3', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å 3', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ 3.' }
        ]
    };

    function renderPortfolio(category) {
        portfolioGallery.innerHTML = ''; // –û—á–∏—â–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
        const items = portfolioItems[category];

        if (items && items.length > 0) {
            items.forEach(item => {
                const portfolioItem = document.createElement('div');
                portfolioItem.classList.add('portfolio-item');

                const img = document.createElement('img');
                img.src = item.src;
                img.alt = item.alt;

                const info = document.createElement('div');
                info.classList.add('portfolio-item-info');

                const title = document.createElement('h3');
                title.textContent = item.title;

                const description = document.createElement('p');
                description.textContent = item.description;

                info.appendChild(title);
                info.appendChild(description);
                portfolioItem.appendChild(img);
                portfolioItem.appendChild(info);
                portfolioGallery.appendChild(portfolioItem);
            });
        } else {
            portfolioGallery.innerHTML = '<p>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.</p>';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            const category = button.dataset.category;
            renderPortfolio(category);
        });
    });

    // –°—Ç–∞—Ç–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–º–æ–¥–∑–∏ - —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω—è–µ–º
    const backgroundAnimation = document.querySelector('.background-animation');
    const emojis = ['üê±', 'üê∞', 'üå∏', '‚ú®', 'üíñ', 'üåà', 'üçì', 'üéÄ', 'üåü', 'üêæ', 'ü¶ã', 'üå∫', 'üí´', 'ü¶Ñ', 'üåô', '‚≠ê', 'üéà', 'üé®', 'üé≠', 'üé™'];
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    const emojiShapes = [];
    let mouseX = 0, mouseY = 0;
    let animationId;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    function getRandomPosition() {
        const margin = 50;
        const x = Math.random() * (backgroundAnimation.offsetWidth - margin * 2) + margin;
        const y = Math.random() * (backgroundAnimation.offsetHeight - margin * 2) + margin;
        return { x, y };
    }

    // –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏ –æ–¥–∏–Ω —Ä–∞–∑
    function createEmoji() {
        const shape = document.createElement('span');
        shape.classList.add('animated-shape');
        
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        shape.textContent = randomEmoji;
        
        const size = Math.random() * 40 + 15;
        shape.style.fontSize = `${size}px`;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        const animations = ['', 'bounce', 'spin'];
        const randomAnimation = animations[Math.floor(Math.random() * animations.length)];
        if (randomAnimation) {
            shape.classList.add(randomAnimation);
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const pos = getRandomPosition();
        shape.style.left = `${pos.x - size / 2}px`;
        shape.style.top = `${pos.y - size / 2}px`;
        shape.style.opacity = Math.random() * 0.8 + 0.2;
        shape.style.color = `hsl(${Math.random() * 60 + 300}, 80%, 70%)`;
        
        backgroundAnimation.appendChild(shape);
        emojiShapes.push(shape);

        return shape;
    }

    // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç
    function updateParallax() {
        const centerX = backgroundAnimation.offsetWidth / 2;
        const centerY = backgroundAnimation.offsetHeight / 2;

        const offsetX = (mouseX - centerX) * 0.03;
        const offsetY = (mouseY - centerY) * 0.03;

        emojiShapes.forEach((shape, index) => {
            const depth = (parseFloat(shape.style.fontSize) / 55) * 2;
            const delay = index * 0.1;
            
            shape.style.transform = `translate(${offsetX * depth}px, ${offsetY * depth}px) translateZ(${delay}px)`;
        });

        animationId = requestAnimationFrame(updateParallax);
    }

    // –°–æ–∑–¥–∞–µ–º 20 —ç–º–æ–¥–∑–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    for (let i = 0; i < 20; i++) {
        createEmoji();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–∞–∫—Å –∞–Ω–∏–º–∞—Ü–∏—é
    updateParallax();

    // –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞)
    renderPortfolio('3d_print');
});